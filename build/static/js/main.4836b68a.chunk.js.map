{"version":3,"sources":["components/navbar/navbar.js","components/header/header.js","components/imageCard/imageCards.js","components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["styles","navBar","background","webkitBoxShadow","position","width","minWidth","scores","justifyContent","NavBar","props","react_default","a","createElement","style","className","href","gameStatus","id","clickCount","highScore","header","padding","text","textAlign","Header","images","height","borderStyle","borderWidth","borderColor","imageHolder","margin","ImageCard","src","image","alt","onClick","clickPhoto","Footer","flex","display","flexWrap","imageContainer","marginTop","pageContainer","App","state","photos","clicked","shuffle","i","length","j","Math","floor","random","temp","_this","setState","element","document","getElementById","includes","classList","remove","push","add","_this2","this","navbar","map","photo","imageCards","key","footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4836b68a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst styles = {\n    navBar: {\n        background: \"rgb(29,202,255)\",\n        webkitBoxShadow: \"0 14px 28px rgba(0, 0, 0, .25), 0 10px 10px rgba(0, 0, 0, .22)\",\n        position: \"fixed\",\n        width: \"100%\",\n        minWidth: \"70px\"\n    },\n    scores: {\n        justifyContent: \"right\"\n    }\n}\nfunction NavBar(props) {\n    return (\n        <nav style ={styles.navBar} className=\"navbar\">\n        \n        <span a href = \"/\" className=\"navbar-brand mb-0 h1\">Clicky Game</span>\n        <span>{props.gameStatus}</span>\n        <span style = {styles.scores} id = \"scores\">Current Score: {props.clickCount} | High Score: {props.highScore}</span>\n        </nav>\n    )\n}\n\nexport default NavBar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst styles = {\r\n    header: {\r\n        padding: \"180px 20px\"\r\n    },\r\n    text: {\r\n        textAlign: \"center\"\r\n    }\r\n}\r\n\r\nfunction Header() {\r\n    return(\r\n        <header style = {styles.header}>\r\n            <h1 style = {styles.text}>Clicky Game!</h1>\r\n            <h2 style = {styles.text}>Click and image to earn points, but don't click on any more than once!</h2>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nconst styles = {\n    images: {\n        width: \"185px\",\n        height: \"185px\",\n        borderStyle: \"solid\",\n        borderWidth: \"5px\",\n        borderColor: \"#ccffff\",\n        webkitBoxShadow: \"0 14px 28px rgba(0, 0, 0, .25), 0 10px 10px rgba(0, 0, 0, .22)\",\n    },\n    imageHolder: {\n        width: \"200px\",\n        margin: \"10px 25px\"\n    }\n    \n};\n\nfunction ImageCard(props) {\n    return (\n        <div style={styles.imageHolder}>\n        <img className = \"images\" style = {styles.images} src = {props.image} alt = \"\"\n        onClick={() => props.clickPhoto(props.id)}></img>\n        </div>   \n            \n    )\n}\n\nexport default ImageCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer>\r\n            <p id = \"footerTag\">Clicky Game</p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, {Component} from 'react';\nimport './App.css';\nimport NavBar from \"./components/navbar/navbar\";\nimport Header from \"./components/header/header\";\nimport ImageCard from \"./components/imageCard/imageCards\";\nimport Footer from \"./components/footer/footer\";\nimport photos from \"./photos.json\";\n\n\nconst styles = {\n  flex: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  imageContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    marginTop: \"15px\"\n  },\n  pageContainer: {\n    display: \"relative\"\n  }\n}\n\nclass App extends Component {\n\n  state = {\n    photos,\n    clickCount: 0,\n    highScore: 0,\n    clicked: [],\n    gameStatus: \"Click an image to begin!\"\n  }\n\n  // Function to shuffle all photos in the array\n  shuffle = (photos) => {\n    let i = photos.length - 1;\n    for (; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = photos[i];\n        photos[i] = photos[j];\n        photos[j] = temp;\n    }\n    this.setState({photos})\n}\n\nclickPhoto = id => {\n  let clicked = this.state.clicked;\n  let clickCount = this.state.clickCount;\n  let highScore = this.state.highScore;\n  let gameStatus;\n  const element = document.getElementById(\"imageArea\");\n  // Checks to see if item has been clicked before\n  if (clicked.includes(id) === false) {\n    gameStatus = \"You guessed correctly!\";\n    this.setState({gameStatus});\n    element.classList.remove(\"shake\");\n    clicked.push(id);\n    clickCount++;\n    // Updates current score and checks to see if its the new High Score\n    if (clickCount > highScore) {\n      highScore = clickCount;\n      this.setState({highScore});\n    }\n    this.setState({clickCount});\n    this.setState({clicked});\n    this.shuffle(this.state.photos);\n  } else {\n    // Restars the game, reseting all values\n    gameStatus = \"You guessed incorrectly!\";\n    this.setState({gameStatus});\n    element.classList.add(\"shake\");\n    clickCount = 0;\n    this.setState({clickCount});\n    this.shuffle(this.state.photos);\n    clicked = [];\n    this.setState({clicked});\n  }\n}\n\n\n  render() {\n  return (\n    <div>\n    <NavBar \n    highScore = {this.state.highScore}\n    clickCount = {this.state.clickCount}\n    gameStatus = {this.state.gameStatus}\n    />\n    <Header />\n    <div style={styles.flex} className = \"container\">\n    <div id = \"imageArea\" style = {styles.imageContainer}>\n    {this.state.photos.map(photo => (\n    <ImageCard \n    key = {photo.id}\n    id = {photo.id}\n    image = {photo.image}\n    clickPhoto = {this.clickPhoto}\n    />\n    ))}\n    </div>\n    </div>\n    <Footer />\n    </div>\n  )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}